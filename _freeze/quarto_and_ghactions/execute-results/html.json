{
  "hash": "8912f1e092ec4ee3e6c752a4a5c0ed34",
  "result": {
    "markdown": "---\ntitle: \"Automatically Publish Quarto Slides with GitHub Actions\"\nauthor: \"Rose Hartman\"\ninstitute: \"Children's Hospital of Philadelphia, Arcus Education\"\ndate: \"2024-06-13\"\n---\n\n\n## What we're covering today\n\n::: {.incremental}\n\n* Very brief intro to Quarto\n* Slightly longer intro to GitHub Actions\n* Walk through an example of how to set up a repository to publish slides automatically!\n* Some resources for you to explore on your own\n* NOT covering how to create a GitHub repository or how to use git\n\n:::\n\n::: notes\n\nThis is a brief talk, so I'm going to skip past a lot of the basics in the interest of time.\nIn particular, I'm going to assume you already use git for version control, and are familiar with terms like \"commit\", \"push\", and \"branch\" as they relate to git and GitHub. \nIf you're new to git, GitHub, or both, this talk probably won't make a ton of sense for you today, but keep an eye out for the resources at the end and you can bookmark these slides to come back to at a later date. And welcome to the wonderful world of git. \n\n::: \n\n# What is Quarto?\n\n::: notes\n\nI'm assuming most of the people listening to this talk have at least heard of Quarto, but to make sure we're all on the same page: Quarto is an open source publishing system, like R Markdown, but with some excellent new functionality.\nOne thing I particularly like quarto for is slides. This presentation is a quarto file, as a matter of fact!\nQuarto files are built for literate statistical programming, meaning you can have executable code blocks and bits of markdown text together in the same file. \nLet's take a quick look at what a single slide in a quarto presentation might look like.\n\n:::\n\n## Quarto example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4|5|\"}\nlibrary(tidyverse)\nmsleep <- msleep |>\n  mutate(across(\n    where(is.character), \n    as.factor))\n```\n:::\n\n\n::: notes\n\nThe quarto format provides a lot of great functionality for including code in your presentations, such as line highlighting! \n\n:::\n\n## Under the hood...\n\n````\n## Quarto example\n\n```{{r}}\n#| message: false\n#| code-line-numbers: \"|4|5|\"\nlibrary(tidyverse)\nmsleep <- msleep |>\n  mutate(across(\n    where(is.character), \n    as.factor))\n```\n\n::: notes\n\nThe quarto format provides a lot of great functionality for including \ncode in your presentations, such as line highlighting! \n\n:::\n````\n\n::: notes\n\nAnd here's what that slide we just saw looks like in the raw quarto file. \nYou can see there's a header, \"Quarto example\", which gives the title of this slide.\nAnd then I have a block of R code, which runs when I render this presentation; this particular block doesn't produce any output, it just changes the msleep dataframe.\nThere are some options I've specified for the code block, special comments starting with #|. \nThe first tells it to suppress messages, so I don't have the message info from loading the tidyverse printed on my slides; this is just like adding \"message=FALSE\" to a code block in RMarkdown. \nThe second, code-line-numbers, is quarto-specific. It's saying I'd like to highlight different lines in the code block sequentially, so I can draw my audience's attention to specific parts of my code. It starts with all lines, then just line 4, then just line 5, then all lines again. \nAnd under the code block, you can see there's a little section marked \"notes\" -- that creates the speaker notes for my slides, what I'm reading right now! Notes only show up if you opt to look at a presentation in speaker view.\n\n:::\n\n## Basic workflow to create and publish Quarto slides\n\n::: incremental\n\n* Make changes to your .qmd file(s), previewing with the Render button in RStudio to convert your .qmd file(s) into the final format.\n* Run `quarto publish` in the command line (not R console) to put your slides on QuartoPub, or wherever else you want to publish them (note that this also re-renders by default before publishing).\n\n:::\n\n::: notes\n\nNote that this doesn't mention git or GitHub. \nThis is just the instructions to render and publish quarto slide decks.\nBut you probably do also want to version control your work, and you probably do also want to share your .qmd files, in case someone else might want to adapt them. \nSo chances are, you have a git and GitHub workflow you need to do in addition to this quarto workflow. \nThe beauty of GitHub actions is that you can get half of this work done for you automatically!\n\n::: \n\n# What are GitHub Actions (GHA)?\n\n::: notes\n\nGitHub Actions are basically magic. \nBriefly, you can set up all kinds of code to run automatically, triggered by events in your GitHub repository. \nThis is very flexible, and very powerful, and people use GHAs for all kinds of things. \nSome of the most common examples are about enforcing standards for a repository -- for example, you can set up a GHA that checks any incoming commits to make sure files have alt text for every image, or to make sure each commit message mentions an issue number. \nBut it can do so much more, including running automatic tests on your R code, updating your pkgdown website, etc.\n\n::: \n\n## {{< fa book-open >}} Learn about GitHub Actions\n\nRead the [GitHub Actions Quickstart Guide](https://docs.github.com/en/actions/quickstart) and the post on the Tidyverse blog about [GitHub Actions for R Users](https://www.tidyverse.org/blog/2022/06/actions-2-0-0/).\n\n<br>\n\nIf you want a dive off the deep end, watch this talk about how data scientists leverage GH Actions in a machine learning analysis workflow: [Machine learning operations with GitHub Actions and Kubernetes](https://www.youtube.com/watch?v=Ll50l3fsoYs)\n\n::: notes\n\nThese are some links for you to come back to later if you want to learn more about GHA. \n\n::: \n\n## Anatomy of a GHA\n\nA YAML file saved in `.github/workflows`\n\n<br>\n\n```\non:\n  [Whatever event you want to be the trigger]\n  \nname: [What is this action called?]\n\njobs: \n  [What should be done? This includes both the \"steps\" and the \"runner\" -- the virtual machine the steps should be run on.]\n\n```\n\n::: notes\n\nThe directory `.github/workflows` is special, and any YAML files you save in there GH will try to use as actions. \nThe basic structure of a GH Action YAML file is to specify the trigger, which might be something like \"whenever a new issue is created\" or \"whenever someone attempts to merge a branch into main\" or even \"every Tuesday morning at 6am\", the name of the action, and then the jobs that should happen on that trigger -- this could be one thing, but it's often several steps. And there are lots and lots of example workflows ready to use, so you don't have to write code from scratch to execute most things here! You can just say \"do the workflow specified in this other public repo over here but on my files\". \n\n::: \n\n## The GHA + QuartoPub workflow\n\n::: incremental\n\n* Make changes to your .qmd file(s), previewing with the Render button in RStudio as you work.\n* When you're ready to commit, render again first with the Render button or run `quarto render` in the command line (not R console). \n* If you **do** want those changes published, commit to main. If you **don't** want them published, commit to a branch.\n* As soon as you push changes to main in your GH repo, it triggers the quarto publish action!\n\n:::\n\n\n::: notes\n\nYour slides will always reflect the current version of your files on main -- there's no risk of you making updates but forgetting to publish them to quartopub.\n\nNote that this is especially handy for repos with multiple collaborators. If you're working on slide decks with someone who is new to quarto and/or doesn't have their own quartopub account set up, you can set it all up once for the whole team and no one has to think about it ever again.\n\n::: \n\n## The setup\n\nIn your directory, you will want:\n\n* `_quarto.yml`\n* `_publish.yml`\n* `_freeze`\n* `.github/workflows`\n\n::: notes\n\nSo, if you want your repo to work like that, what do you need to do?\n\n::: \n\n## `_quarto.yml`\n\nThis file sets options for what happens when you render. \n\n. . . \n\nHere's what the `_quarto.yml` file for this repo looks like:\n\n```\nproject:\n  type: website\n  render: \n    - \"*.qmd\"\n  \nembed-resources: true\nexecute:\n  echo: true\n  freeze: auto\nformat: \n  chopr-revealjs  \n```\n\n## `_publish.yml`\n\nThis file contains the information needed to publish your slides to QuartoPub (except authentication, which has to be set up separately). \nYou don't create this file, it will be created automatically the first time you run `quarto publish` locally.\n\n. . . \n\nHere's what `_publish.yml` looks like in this repo:\n\n```\n- source: project\n  quarto-pub:\n    - id: a8d7fe1c-8a63-40cf-a107-999ae9475df3\n      url: 'https://rosemhartman.quarto.pub/rmed_2024'\n\n```\n\n::: notes\n\nCrucially, you won't be able to get this file until you've run quarto publish once successfully on your own computer. That means your first time publishing this document can't be in a GHA; you have to publish it at least once the regular way, and then you can automate all your updates from then on.\n\n::: \n\n## `_freeze`\n\nYou don't create this directory -- quarto will make it for you the first time you render your slides.\n\n. . . \n\nWe have [freeze computations](https://quarto.org/docs/publishing/quarto-pub.html#freezing-computations) set up in `_quarto.yml`. \nThis means computations in R are done locally only, and the results are stored in `_freeze`. \n\nThat folder needs to be version controlled so it's available on GitHub. \nWhen you render, it will save the results of all the executed code in the `_freeze` directory. \nWhen you commit and push the changes you made to your .qmd file, be sure to add any changes to the `_freeze` directory as well. \n\n::: notes\n\nWe're not asking GitHub to actually execute all the R code (that would be very computationally expensive), so it's important that you use `quarto render` locally on your own computer after making any changes that could affect code output. \n\n:::\n\n## `.github/workflows`\n\n(From [the Quarto docs instructions for using GHA](https://quarto.org/docs/publishing/quarto-pub.html#publish-action))\n\n```\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4 \n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish \n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: quarto-pub\n          QUARTO_PUB_AUTH_TOKEN: ${{ secrets.QUARTO_PUB_AUTH_TOKEN }}\n```\n\n::: notes\n\nHere's a look at what my GH Action YAML looks like for this repository. \nThis has the same basic structure we talked about for GHA before: on, name, jobs.\nThe name of this action is Quarto Publish, and it's triggered whenever any contributor pushes changes to main, or it can be triggered manually (that's what workflow_dispatch means).\nUnder jobs, you can see there are three distinct steps, and for each of them I'm just referencing an existing GH Action somewhere else. \nThe first step is \"[Check out repository](https://github.com/actions/checkout)\" which just gets a copy of the files in the repository ready to work with on the runner. \nThe second step is \"[Set up Quarto](https://github.com/quarto-dev/quarto-actions/blob/main/setup)\" which installs quarto on the runner. \nThe third step is \"[Render and Publish](https://github.com/quarto-dev/quarto-actions/blob/main/publish)\" which publishes my slides to quarto-pub (the target) using my quarto pub authorization token, which has to be stored in secrets for this job to be able to run.\nUnder each job, the \"uses\" field points to the example workflow I'm using for each -- the first is just from the general GitHub examples, and the second two are published by the Quarto development team. \n\n::: \n\n## QuartoPub authorization\n\nIn order for this to work, you need to [create a Quarto Pub personal access token and then configure your GitHub action to be able to read it](https://quarto.org/docs/publishing/quarto-pub.html#quarto-pub-credentials).\n\n. . . \n\n1. Log in to your **Quarto Pub** account profile page, and click \"New Token\". Copy it.\n2. In your **GitHub** repo, go to Settings > Secrets > Actions and click \"New repository secret\". Name it `QUARTO_PUB_AUTH_TOKEN` and paste in the token you copied.  \n\n## That's it! {{< fa rocket >}}\n\nOnce you have those pieces in place, whenever you update your .qmd files on the main branch of your repo, your slides on Quarto Pub will update, too. \n\n## {{< fa book-open >}} Keep learning\n\n* You actually didn't need to listen to this talk at all! You can just follow [the Quarto team's instructions for setting up GH actions](https://quarto.org/docs/publishing/quarto-pub.html#github-action).\n* To see a practical example, check out the [workshop series we ran using this workflow](https://arcus.github.io/r102/), including slides and recordings for four R workshops. Then poke around the GH repo to see how it's set up!\n* Read about how (and why) to [version control your writing](https://education.arcus.chop.edu/version-control-writing/).\n* Get started with [Quarto slide decks](https://quarto.org/docs/presentations/).\n* Get started with [GitHub Actions](https://docs.github.com/en/actions/quickstart).\n* I kept talking about \"YAML\" and never explained -- [what is YAML?](https://www.redhat.com/en/topics/automation/what-is-yaml)\n* New to version control? Check out the Arcus Education [intro to version control](https://liascript.github.io/course/?https://raw.githubusercontent.com/arcus/Arcus_Labs_Orientation/main/new_to_version_control.md#1), written with biomedical researchers and clinicians in mind.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}